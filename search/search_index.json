{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Extract step","text":""},{"location":"#workflow","title":"Workflow","text":"<pre><code>gantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d</code></pre>"},{"location":"#extracting-data","title":"Extracting data","text":"<p>function to read files from a folder \"data/input\" and return a dataframe lists</p> <p>args: input_path(str): folder path with all files</p> <p>return: dataframes lists</p> Source code in <code>src/pipeline/extract.py</code> <pre><code>def extract_from_excel(input_path: str) -&gt; List[pd.DataFrame]:\n    \"\"\"\n    function to read files from a folder \"data/input\" and return a dataframe lists\n\n    args: input_path(str): folder path with all files\n\n    return: dataframes lists\n    \"\"\"\n\n    all_files = glob.glob(os.path.join(input_path, '*.xlsx'))\n    df_list = []\n\n    for file in all_files:\n        df_list.append(pd.read_excel(file))\n\n    return df_list\n</code></pre>"},{"location":"load/","title":"Load step","text":""},{"location":"load/#workflow","title":"Workflow","text":"<pre><code>gantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d</code></pre>"},{"location":"load/#extracting-data","title":"Extracting data","text":"<p>Receives dataframes and create a excel file on desire path.</p> <p>Parameters:</p> Name Type Description Default <code>data_frame(pd.Dataframe)</code> <p>dataframe to be saved on a excel file format</p> required <code>output_path(str)</code> <p>path to create the file</p> required <code>file_name(str)</code> <p>file name to be created</p> required <p>return: \"Filed saved with sucess!\"</p> Source code in <code>src/pipeline/load.py</code> <pre><code>def load_excel(\n    data_frame: pd.DataFrame, output_path: str, file_name: str\n) -&gt; str:\n    \"\"\"\n    Receives dataframes and create a excel file on desire path.\n\n    args:\n        data_frame(pd.Dataframe): dataframe to be saved on a excel file format\n        output_path(str): path to create the file\n        file_name(str): file name to be created\n\n    return: \"Filed saved with sucess!\"\n    \"\"\"\n    if not os.path.exists(output_path):\n        os.makedirs(output_path)\n\n    data_frame.to_excel(f'{output_path}/{file_name}.xlsx', index=False)\n    return 'Filed saved with sucess!'\n</code></pre>"},{"location":"transform/","title":"Transform step","text":""},{"location":"transform/#workflow","title":"Workflow","text":"<pre><code>gantt\n    title A Gantt Diagram\n    dateFormat YYYY-MM-DD\n    section Section\n        A task          :a1, 2014-01-01, 30d\n        Another task    :after a1, 20d\n    section Another\n        Task in Another :2014-01-12, 12d\n        another task    :24d</code></pre>"},{"location":"transform/#extracting-data","title":"Extracting data","text":"<p>Transform a list of dataframes in a single dataframe.</p> <p>args: List[pd.Dataframe]: list of dataframes</p> <p>return: dataframe</p> Source code in <code>src/pipeline/transform.py</code> <pre><code>def concat_data_frames(data_frame_list: List[pd.DataFrame]) -&gt; pd.DataFrame:\n    \"\"\"\n    Transform a list of dataframes in a single dataframe.\n\n    args: List[pd.Dataframe]: list of dataframes\n\n    return: dataframe\n    \"\"\"\n    return pd.concat(data_frame_list, ignore_index=True)\n</code></pre>"}]}